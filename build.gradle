plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'io.dotinc.vertx-codegen-plugin' version '0.1.1'
}

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
}

group = 'se.kry'
version = '1.0.0-SNAPSHOT'

sourceCompatibility = '1.8'
mainClassName = 'io.vertx.core.Launcher'

def mainVerticleName = 'se.kry.codetest.MainVerticle'
def profile = 'local'
def confPath = "$buildDir/conf/" + profile + '_config.json'


ext {
    vertxVersion = '3.9.0'
    lombokVersion = '1.18.10'
    junitJupiterEngineVersion = '5.4.0'
    slf4jVersion = '1.7.30'
    hsqlVersion = '2.5.1'
    watchForChange = 'src/**/*'
    doOnChange = './gradlew classes'
}

shadowJar {
    classifier = 'fat'
    manifest {
        attributes 'Main-Verticle': mainVerticleName
    }
    mergeServiceFiles {
        include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
    }
}

task chooseProfile(dependsOn: processResources/**/) {

    if (project.hasProperty('local')) {
        profile = 'local'
    } else if (project.hasProperty('dev')) {
        profile = 'dev'
    }
    confPath = "$buildDir/resources/main/conf/config.json"

    println 'Using config: "' + confPath + '" for ' + project.getName() + ' project'
    println 'Launching verticle ' + String.valueOf(mainVerticleName)
    processResources {
        include "**/**"
        exclude "**/*_log4j.properties"
        exclude "**/*.json"
    }

}
task copyConf(type: Copy){
    into "$buildDir/resources/main/conf"
    from "$projectDir/conf"
    include '**/'+ profile + '_config.json'
    rename {
        "config.json"
    }
}

task copyJWKPem(type: Copy){
    into "$buildDir/resources/main"
    from 'src/main/resources'
    include '**/'+ profile + '_jwk.json'
    rename {
        "jwk.json"
    }
}

task logConfRename(type: Copy){
    into "$buildDir/resources/main"
    from 'src/main/resources'
    include '**/'+ profile + '_log4j.properties'
    rename { String fileName ->
        fileName.replace(profile+"_", "")
    }
}

task swaggerFileReplace(type: Copy){
    into "$projectDir/webroot/swagger-ui"
    from 'src/main/resources'
    include '**/api_desc.yaml'
}

classes {
    dependsOn chooseProfile
    dependsOn copyJWKPem
    dependsOn copyConf
    dependsOn logConfRename
    dependsOn swaggerFileReplace
}

repositories {
    jcenter()
}

codeGen {
    vertxVersion = '3.9.0'
    generatedDirs = "src/main/generated"
    generationPath = "proxy"
}



compileJava{
    targetCompatibility = "$sourceCompatibility"
    sourceCompatibility = "$sourceCompatibility"

    source += 'src/main/generated'
    //options.compilerArgs += '-proc:none'
}

clean {
    delete += 'src/main/generated'
}

sourceSets {
    main {
        java {
            srcDirs += 'src/main/generated'
        }
    }
}

dependencies {
    compileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"
    compileOnly "io.vertx:vertx-codegen:$vertxVersion"
    annotationProcessor "io.vertx:vertx-codegen:$vertxVersion:processor"
    compileOnly "io.vertx:vertx-service-proxy:$vertxVersion"
    annotationProcessor "io.vertx:vertx-service-proxy:$vertxVersion:processor"
    compileOnly "io.vertx:vertx-web-api-service:$vertxVersion"
    annotationProcessor "io.vertx:vertx-web-api-service:$vertxVersion"

    compile("io.vertx:vertx-core:${vertxVersion}")
    compile("io.vertx:vertx-web:${vertxVersion}")
    compile "io.vertx:vertx-config:$vertxVersion"
    compile "io.vertx:vertx-web-client:$vertxVersion"
    compile("io.vertx:vertx-codegen:${vertxVersion}")
    compile "io.vertx:vertx-service-proxy:$vertxVersion"
    compile "io.vertx:vertx-circuit-breaker:$vertxVersion"
    compile "io.vertx:vertx-web-api-service:$vertxVersion"
    //compile "io.vertx:vertx-web-validation:$vertxVersion"
    compile "io.vertx:vertx-auth-jwt:$vertxVersion"
    compile "io.vertx:vertx-junit5:$vertxVersion"
    
    testCompile("io.vertx:vertx-unit:${vertxVersion}")
    testCompileOnly "org.projectlombok:$lombokVersion"

    compile "io.vertx:vertx-jdbc-client:$vertxVersion"
    //compile "org.hsqldb:hsqldb:$hsqlVersion"

    compile "org.slf4j:slf4j-api:$slf4jVersion"
    compile "org.slf4j:slf4j-log4j12:$slf4jVersion"

    compile "org.projectlombok:lombok:$lombokVersion"

    compile 'com.h2database:h2:1.4.200'

    testImplementation "io.vertx:vertx-junit5:$vertxVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterEngineVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterEngineVersion"

}

tasks.withType(JavaCompile) {
    options.compilerArgs += ['-Xlint:deprecation']
}

test {
    useJUnitPlatform()
    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED'
    }
}

run {
    args = [
            'run', mainVerticleName,
            '-Dvertx.logger-delegate-factory-class-name=io.vertx.core.logging.SLF4JLogDelegateFactory',
            "-conf", confPath,
            "--redeploy=$project.ext.watchForChange",
            "--launcher-class=$mainClassName",
            "--on-redeploy=$project.ext.doOnChange",
            profile.equals('local') ? "--java-opts" : "", profile.equals('local') ?
                    "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000" : ""
    ]
}

/*
task wrapper(type: Wrapper) {
    gradleVersion = '5.0'
}
*/
